{
  "name": "helmet",
  "author": {
    "name": "Adam Baldwin",
    "email": "baldwin@andyet.net",
    "url": "http://andyet.net/team/baldwin"
  },
  "contributors": [
    {
      "name": "Evan Hahn",
      "email": "me@evanhahn.com",
      "url": "http://evanhahn.com"
    }
  ],
  "description": "Security middleware collection for Express/Connect",
  "version": "0.2.4",
  "keywords": [
    "security",
    "headers",
    "express",
    "x-frame-options",
    "csp",
    "hsts",
    "crossdomain.xml"
  ],
  "repository": {
    "url": "git://github.com/evilpacket/helmet.git"
  },
  "engines": {
    "node": ">= 0.6.6"
  },
  "dependencies": {
    "platform": "1.1.x",
    "underscore": "1.6.x"
  },
  "devDependencies": {
    "connect": "2.19.x",
    "mocha": "1.20.x",
    "supertest": "0.13.x"
  },
  "scripts": {
    "test": "mocha"
  },
  "main": "lib/index",
  "readme": "Helmet\n======\n\n[![Dependency Status](https://david-dm.org/evilpacket/helmet.png)](https://david-dm.org/evilpacket/helmet)\n\nHelmet is a series of middlewares for Express/Connect apps that implement various security headers to make your app more secure. *It's not a silver bullet*, but it can help!\n\nHelmet includes the following middlewares:\n\n- `csp` (Content Security Policy)\n- `hsts` (HTTP Strict Transport Security)\n- `xframe` (X-Frame-Options)\n- `iexss` (X-XSS-Protection for IE8+)\n- `ienoopen` (X-Download-Options for IE8+)\n- `contentTypeOptions` (X-Content-Type-Options)\n- `cacheControl` (Cache-Control)\n- `crossdomain` (crossdomain.xml)\n- `hidePoweredBy` (remove X-Powered-By)\n\nInstallation\n------------\n\n    npm install helmet\n\nBasic usage\n-----------\n\n\nTo use a particular middleware application-wide, just `use` it:\n\n```javascript\nvar helmet = require('helmet')\nvar app = express() // or connect\n\napp.use(helmet.csp())\napp.use(helmet.xframe('deny'))\napp.use(helmet.contentTypeOptions())\n```\n\n*If you're using Express 3, make sure these middlewares are listed before `app.router`.*\n\nIf you just want to use the default-level policies, all you need to do is:\n\n```javascript\napp.use(helmet.defaults())\n```\n\nDon't want all the defaults?\n\n```javascript\nhelmet.defaults(app, { xframe: false })\napp.use(helmet.xframe('sameorigin'))\n```\n\nContent Security Policy\n------------------------\n\nSetting an appropriate Content Security Policy can protect your users against a variety of attacks (perhaps the largest of which is XSS). To learn more about CSP, check out the [HTML5 Rocks guide](http://www.html5rocks.com/en/tutorials/security/content-security-policy/).\n\nUsage:\n\n```javascript\napp.use(helmet.csp({\n  'default-src': [\"'self'\", 'default.com'],\n  'script-src': ['scripts.com'],\n  'style-src': ['style.com'],\n  'img-src': ['img.com'],\n  'connect-src': ['connect.com'],\n  'font-src': ['font.com'],\n  'object-src': ['object.com'],\n  'media-src': ['media.com'],\n  'frame-src': ['frame.com'],\n  'sandbox': ['allow-forms', 'allow-scripts'],\n  'report-uri': ['/report-violation'],\n  reportOnly: false, // set to true if you only want to report errors\n  setAllHeaders: false, // set to true if you want to set all headers\n  safari5: false // set to true if you want to force buggy CSP in Safari 5\n})\n```\n\nThere are a lot of inconsistencies in how browsers implement CSP. Helmet sniffs the user-agent of the browser and sets the appropriate header and value for that browser. If no user-agent is found, it will set _all_ the headers with the 1.0 spec.\n\nHTTP Strict Transport Security\n-------------------------------\n\nThis middleware adds the `Strict-Transport-Security` header to the response. [See the spec.](http://tools.ietf.org/html/draft-ietf-websec-strict-transport-sec-04)\n\nTo use the default header of `Strict-Transport-Security: maxAge=15768000` (about 6 months):\n\n```javascript\napp.use(helmet.hsts())\n```\n\nTo adjust other values for `maxAge` and to include subdomains:\n\n```javascript\napp.use(helmet.hsts(1234567, true))\n```\n\nNote that the max age is in _seconds_, not milliseconds (as is typical in JavaScript).\n\nX-Frame-Options\n---------------\n\nX-Frame specifies whether your app can be put in a frame or iframe. It has three modes: `DENY`, `SAMEORIGIN`, and `ALLOW-FROM`. If your app does not need to be framed (and most don't) you can use the default `DENY`.\n\nUsage:\n\n```javascript\n// These are equivalent:\napp.use(helmet.xframe())\napp.use(helmet.xframe('deny'))\n\n// Only let me be framed by people of the same origin:\napp.use(helmet.xframe('sameorigin'))\n\n// Allow from a specific host:\napp.use(helmet.xframe('allow-from', 'http://example.com'))\n```\n\n### Browser Support\n\n- IE8+\n- Opera 10.50+\n- Safari 4+\n- Chrome 4.1.249.1042+\n- Firefox 3.6.9 (or earlier with NoScript)\n\nX-XSS-Protection\n-----------------\n\nThe X-XSS-Protection header is a basic protection against XSS.\n\nUsage:\n\n```javascript\napp.use(helmet.iexss())\n```\n\nThis sets the `X-XSS-Protection` header. On modern browsers, it will set the value to `1; mode=block`. On old versions of Internet Explorer, this creates a vulnerability (see [here](http://hackademix.net/2009/11/21/ies-xss-filter-creates-xss-vulnerabilities/) and [here](http://technet.microsoft.com/en-us/security/bulletin/MS10-002)), and so the header is set to `0`. To force the header on all versions of IE, add the option:\n\n```javascript\napp.use(helmet.iexss({ setOnOldIE: true }))\n```\n\n## X-Download-Options\n\nSets the `X-Download-Options` header to `noopen` to prevent IE users from executing downloads in your site's context. For more, see [this MSDN blog post](http://blogs.msdn.com/b/ie/archive/2008/07/02/ie8-security-part-v-comprehensive-protection.aspx).\n\n```javascript\napp.use(helmet.ienoopen())\n```\n\nX-Content-Type-Options\n----------------------\n\nThe following example sets the `X-Content-Type-Options` header to its only and default option, `nosniff`:\n\n```javascript\napp.use(helmet.contentTypeOptions())\n```\n\nCache-Control\n-------------\n\nThe following example sets the `Cache-Control` header to `no-store, no-cache`. This is not configurable at this time.\n\n```javascript\napp.use(helmet.cacheControl())\n```\n\nCrossdomain.xml\n---------------\n\nThe following example sets the most restrictive [crossdomain.xml](http://www.adobe.com/devnet/articles/crossdomain_policy_file_spec.html):\n\n```javascript\napp.use(helmet.crossdomain())\n```\n\nHide X-Powered-By\n-----------------\n\nThis middleware will remove the `X-Powered-By` header if it is set.\n\n```javascript\napp.use(helmet.hidePoweredBy())\n```\n\nNote: if you're using Express, you can skip Helmet's middleware if you want:\n\n```javascript\napp.disable('x-powered-by')\n```\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/evilpacket/helmet/issues"
  },
  "homepage": "https://github.com/evilpacket/helmet",
  "_id": "helmet@0.2.4",
  "dist": {
    "shasum": "6a4962d4ed607e6dcb5afefb6a8c14ce08584e12"
  },
  "_from": "helmet@latest",
  "_resolved": "https://registry.npmjs.org/helmet/-/helmet-0.2.4.tgz"
}
